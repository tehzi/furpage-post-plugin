{"version":3,"file":"./graphql.js","mappings":"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","sources":["webpack://nest-serverless/./src/app.controller.ts","webpack://nest-serverless/./src/app.module.ts","webpack://nest-serverless/./src/app.service.ts","webpack://nest-serverless/./src/images/images.entity.ts","webpack://nest-serverless/./src/images/images.module.ts","webpack://nest-serverless/./src/ydb/builder/ydb-builder.provider.ts","webpack://nest-serverless/./src/ydb/decorators/column.decorator.ts","webpack://nest-serverless/./src/ydb/decorators/entity.decorator.ts","webpack://nest-serverless/./src/ydb/decorators/primary-column.decorator.ts","webpack://nest-serverless/./src/ydb/helpers/ydb-types-static.helper.ts","webpack://nest-serverless/./src/ydb/logger/logger.provider.ts","webpack://nest-serverless/./src/ydb/metadata/column-metadata.ts","webpack://nest-serverless/./src/ydb/metadata/entity-metadata.ts","webpack://nest-serverless/./src/ydb/metadata/store/ydb-metadata-column.store.ts","webpack://nest-serverless/./src/ydb/metadata/store/ydb-metadata-table.store.ts","webpack://nest-serverless/./src/ydb/metadata/table-metadata.ts","webpack://nest-serverless/./src/ydb/metadata/ydb-metadata.provider.ts","webpack://nest-serverless/./src/ydb/query-runner/query-runner.provider.ts","webpack://nest-serverless/./src/ydb/struct/table-column.struct.ts","webpack://nest-serverless/./src/ydb/struct/table-index.struct.ts","webpack://nest-serverless/./src/ydb/struct/table.struct.ts","webpack://nest-serverless/./src/ydb/types/abstract-column.type.ts","webpack://nest-serverless/./src/ydb/types/abstract-index.type.ts","webpack://nest-serverless/./src/ydb/types/abstract-store.type.ts","webpack://nest-serverless/./src/ydb/types/abstract-table.type.ts","webpack://nest-serverless/./src/ydb/utils/get-table-name.util.ts","webpack://nest-serverless/./src/ydb/utils/is-object.util.ts","webpack://nest-serverless/./src/ydb/utils/primitive-ydb-type-to-local-type.util.ts","webpack://nest-serverless/./src/ydb/ydb.constant.ts","webpack://nest-serverless/./src/ydb/ydb.module.ts","webpack://nest-serverless/external commonjs \"@nestjs/apollo\"","webpack://nest-serverless/external commonjs \"@nestjs/common\"","webpack://nest-serverless/external commonjs \"@nestjs/config\"","webpack://nest-serverless/external commonjs \"@nestjs/core\"","webpack://nest-serverless/external commonjs \"@nestjs/graphql\"","webpack://nest-serverless/external commonjs \"@nestjs/platform-express\"","webpack://nest-serverless/external commonjs \"aws-serverless-express\"","webpack://nest-serverless/external commonjs \"aws-serverless-express/middleware\"","webpack://nest-serverless/external commonjs \"cli-highlight\"","webpack://nest-serverless/external commonjs \"debug\"","webpack://nest-serverless/external commonjs \"express\"","webpack://nest-serverless/external commonjs \"reflect-metadata\"","webpack://nest-serverless/external commonjs \"ydb-sdk\"","webpack://nest-serverless/webpack/bootstrap","webpack://nest-serverless/webpack/runtime/compat get default export","webpack://nest-serverless/webpack/runtime/define property getters","webpack://nest-serverless/webpack/runtime/hasOwnProperty shorthand","webpack://nest-serverless/webpack/runtime/make namespace object","webpack://nest-serverless/./graphql.ts"],"sourcesContent":["import { Controller } from \"@nestjs/common\";\nimport { AppService } from \"./app.service\";\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n}\n","import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { GraphQLModule } from \"@nestjs/graphql\";\nimport { ApolloDriver, ApolloDriverConfig } from \"@nestjs/apollo\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { YdbModule } from \"./ydb/ydb.module\";\nimport { ImagesModule } from \"./images/images.module\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot(),\n        GraphQLModule.forRoot<ApolloDriverConfig>({\n            // TODO исправить для прода и теста\n            path: \"/proxy/graphql\",\n            driver: ApolloDriver,\n            autoSchemaFile: true,\n        }),\n        YdbModule.forRoot({\n            endpoint: process.env.YDB_ENDPOINT,\n            database: process.env.DATABASE,\n            logger: true,\n        }),\n        ImagesModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n","import { Query, Resolver } from \"@nestjs/graphql\";\n\n@Resolver()\nexport class AppService {\n    @Query(() => String)\n    getHello(): string {\n        return \"Hello World 123!\";\n    }\n}\n","import { Column } from \"../ydb/decorators/column.decorator\";\nimport { Entity } from \"../ydb/decorators/entity.decorator\";\nimport { PrimaryColumn } from \"../ydb/decorators/primary-column.decorator\";\n\n@Entity()\nexport class ImagesEntity {\n    @PrimaryColumn()\n    id!: string;\n\n    @Column()\n    url!: string;\n\n    @Column()\n    tags!: string;\n\n    @Column()\n    fileUrl!: string;\n\n    @Column()\n    base64Image!: string;\n\n    @Column()\n    title!: string;\n\n    @Column()\n    queueId!: number;\n\n    // queue: QueueEntity;\n\n    // created!: Date;\n    // updated!: Date;\n}\n","import { NestjsQueryGraphQLModule } from \"@nestjs-query/query-graphql\";\nimport { Module } from \"@nestjs/common\";\nimport { YdbModule } from \"../ydb/ydb.module\";\nimport { ImagesDto } from \"./images.dto\";\nimport { ImagesEntity } from \"./images.entity\";\n\n@Module({\n    imports: [\n        YdbModule.forFeature([ImagesEntity]),\n        // NestjsQueryGraphQLModule.forFeature({\n        //     imports: [YdbModule.forFeature([ImagesEntity])],\n        //     resolvers: [{ DTOClass: ImagesDto, EntityClass: ImagesEntity }],\n        // }),\n    ],\n})\nexport class ImagesModule {}\n","import { Injectable } from \"@nestjs/common\";\nimport { Logger } from \"../logger/logger.provider\";\nimport { EntityMetadata } from \"../metadata/entity-metadata\";\nimport { YdbMetadata } from \"../metadata/ydb-metadata.provider\";\nimport { QueryRunner } from \"../query-runner/query-runner.provider\";\nimport { Table } from \"../struct/table.struct\";\n\n@Injectable()\nexport class YDbBuilder {\n    private tablesMetadata: EntityMetadata[] = [];\n\n    private tablesToSyncMetadata: EntityMetadata[] = [];\n\n    constructor(\n        private readonly metadata: YdbMetadata,\n        private readonly queryRunner: QueryRunner,\n        private readonly logger: Logger,\n    ) {\n        this.initialize();\n    }\n\n    private async initialize(): Promise<void> {\n        this.metadata.build();\n\n        this.tablesMetadata = this.metadata.entitiesMetadata;\n        this.tablesToSyncMetadata = this.tablesMetadata.filter(({ synchronize }) => synchronize);\n\n        const tablesPath = this.tablesToSyncMetadata.map(({ name }) => name);\n\n        await this.queryRunner.getTables(tablesPath);\n        await this.synchronizeInOrder();\n    }\n\n    private async synchronizeInOrder(): Promise<void> {\n        await this.renameColumns();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n    }\n\n    private async renameColumns(): Promise<void> {}\n\n    private async createNewTables(): Promise<void> {\n        for (const metadata of this.tablesToSyncMetadata) {\n            const isTableExist = this.queryRunner.loadedTables.find((table) => table.name === metadata.name);\n\n            if (isTableExist) continue;\n\n            this.logger.logSchema(`Creating new table ${metadata.name}`);\n\n            const table = Table.new(metadata);\n            // const tables = this.queryRunner.loadedTables;\n        }\n        // this.driver.tableClient.withSession(async (session) => {\n        //     debugger;\n        //     console.log(await this.driver.schemeClient.listDirectory(\"\"))\n        //     // await session.createTable(\n        //     //     \"foo\",\n        //     //     new TableDescription()\n        //     //         .withColumn(new Column(\"customer_id\", Types.optional(Types.UINT64)))\n        //     //         .withColumn(new Column(\"order_id\", Types.optional(Types.UINT64)))\n        //     //         .withColumn(new Column(\"description\", Types.optional(Types.UTF8)))\n        //     //         .withColumn(new Column(\"order_date\", Types.optional(Types.DATE)))\n        //     //         .withPrimaryKeys(\"customer_id\", \"order_id\"),\n        //     // );\n        //     // console.log(await session.executeQuery(query))\n        //     debugger;\n        // });\n    }\n\n    private async dropRemovedColumns(): Promise<void> {}\n\n    private async addNewColumns(): Promise<void> {}\n\n    private async updatePrimaryKeys(): Promise<void> {}\n\n    private async updateExistColumns(): Promise<void> {}\n\n    private async createNewIndices(): Promise<void> {}\n\n    private async createNewChecks(): Promise<void> {}\n}\n","import { YdbTypesStatic } from \"../helpers/ydb-types-static.helper\";\nimport { YdbMetadataColumnStore } from \"../metadata/store/ydb-metadata-column.store\";\nimport { TYdbTypes } from \"../types/types\";\nimport { isObject } from \"../utils/is-object.util\";\nimport { IYdbColumnOptions } from \"../ydb.types\";\n\nexport function Column(\n    typeOrOption?: IYdbColumnOptions | TYdbTypes,\n    maybeOption?: IYdbColumnOptions,\n): PropertyDecorator {\n    let type: TYdbTypes;\n    let options: IYdbColumnOptions;\n\n    type = typeof typeOrOption === \"string\" ? typeOrOption : null;\n    options = isObject(typeOrOption) ? typeOrOption : maybeOption;\n\n    options = options ?? {};\n\n    return (target, name: string): void => {\n        if (!type) {\n            ({ type = null } = options);\n        }\n\n        if (type === null) {\n            const reflectKeyType = Reflect?.getMetadata(\"design:type\", target, name);\n            type = [\n                reflectKeyType === String && YdbTypesStatic.Utf8,\n                reflectKeyType === Number && YdbTypesStatic.Uint32,\n                reflectKeyType === Boolean && YdbTypesStatic.Bool,\n            ].find(Boolean) as TYdbTypes;\n        }\n\n        YdbMetadataColumnStore.add({\n            target: target.constructor,\n            type,\n            name,\n            options,\n        });\n    };\n}\n","import { YdbMetadataTableStore } from \"../metadata/store/ydb-metadata-table.store\";\nimport { getTableName } from \"../utils/get-table-name.util\";\nimport { isObject } from \"../utils/is-object.util\";\nimport { IEntityOptions } from \"../ydb.types\";\n\nexport function Entity(options?: IEntityOptions): ClassDecorator;\n\nexport function Entity(name?: string, options?: IEntityOptions): ClassDecorator;\n\nexport function Entity(nameOrOptions?: string | IEntityOptions, maybeOption?: IEntityOptions): ClassDecorator {\n    const options = (isObject(nameOrOptions) ? nameOrOptions : maybeOption) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : nameOrOptions?.name;\n\n    options.synchronize = options.synchronize === false ? false : true;\n\n    return (target): void => {\n        const tableName = name || target.name;\n\n        YdbMetadataTableStore.add({\n            target,\n            name: getTableName(tableName),\n            ...options,\n        });\n        // YdbMetadataStore.addTable({\n        //     target,\n        //     name: getTableName(tableName),\n        //     ...options,\n        // });\n    };\n}\n","export function PrimaryColumn(): PropertyDecorator {\n    return (): void => {};\n}\n","// eslint-disable-next-line unicorn/no-static-only-class\nexport class YdbTypesStatic {\n    static Bool = \"Bool\";\n\n    static Int8 = \"Int8\";\n\n    static Int16 = \"Int16\";\n\n    static Int32 = \"Int32\";\n\n    static Int64 = \"Int64\";\n\n    static Uint8 = \"Uint8\";\n\n    static Uint16 = \"Uint16\";\n\n    static Uint32 = \"Uint32\";\n\n    static Uint64 = \"Uint64\";\n\n    static Float = \"Float\";\n\n    static Double = \"Double\";\n\n    static Decimal = \"Decimal\";\n\n    static DyNumber = \"DyNumber\";\n\n    static String = \"String\";\n\n    static Utf8 = \"Utf8\";\n\n    static Json = \"Json\";\n\n    static JsonDocument = \"JsonDocument\";\n\n    static Yson = \"Yson\";\n\n    static Uuid = \"Uuid\";\n\n    static Date = \"Date\";\n\n    static Datetime = \"Datetime\";\n\n    static Timestamp = \"Timestamp\";\n\n    static Interval = \"Interval\";\n\n    static TzDate = \"TzDate\";\n\n    static TzDateTime = \"TzDateTime\";\n\n    static TzTimestamp = \"TzTimestamp\";\n}\n","import { Injectable } from \"@nestjs/common\";\nimport { highlight } from \"cli-highlight\";\nimport createDebug from \"debug\";\n\n@Injectable()\nexport class Logger {\n    private debugQuery = createDebug(\"ydb:query:log\");\n\n    private debugSchema = createDebug(\"ydb:schema:log\");\n\n    private debugLog = createDebug(\"ydb:log\");\n\n    private debugInfo = createDebug(\"ydb:info\");\n\n    private debugWarn = createDebug(\"ydb:warn\");\n\n    constructor(private enabled) {\n        if (this.enabled) {\n            createDebug.enable(\"ydb:*\");\n        }\n    }\n\n    private highlight(sql: string): string {\n        return highlight(sql, { language: \"sql\", ignoreIllegals: true });\n    }\n\n    logQuery(query: string, parameters?: unknown[]): void {\n        if (this.debugQuery.enabled) {\n            this.debugQuery(this.highlight(query));\n\n            if (parameters?.length) {\n                this.debugQuery(\"parameters:\", parameters);\n            }\n        }\n    }\n\n    logSchema(message: string): void {\n        if (this.debugSchema.enabled) {\n            this.debugSchema(message);\n        }\n    }\n\n    log(message: string, level: \"log\" | \"warn\" | \"info\" = \"log\"): void {\n        switch (level) {\n            case \"log\":\n                if (this.debugLog.enabled) {\n                    this.debugLog(message);\n                }\n                break;\n            case \"info\":\n                if (this.debugInfo.enabled) {\n                    this.debugInfo(message);\n                }\n                break;\n            case \"warn\":\n                if (this.debugWarn.enabled) {\n                    this.debugWarn(message);\n                }\n                break;\n        }\n    }\n}\n","import { AbstractColumn } from \"../types/abstract-column.type\";\nimport { IColumn } from \"../ydb.types\";\n\nexport class ColumnMetadata extends AbstractColumn {\n    constructor(metadata: IColumn) {\n        super(metadata.options);\n\n        this.name = metadata.name;\n\n        this.type = metadata.type;\n    }\n}\n","import { Driver } from \"ydb-sdk\";\nimport { IColumn, IEntityMetadataOptions, IYdbTable } from \"../ydb.types\";\nimport { ColumnMetadata } from \"./column-metadata\";\nimport { TableMetadata } from \"./table-metadata\";\n\nexport class EntityMetadata {\n    private connection: Driver;\n\n    private table: IYdbTable;\n\n    private columns: IColumn[];\n\n    private tableMetadataStorage: TableMetadata;\n\n    constructor(options: IEntityMetadataOptions) {\n        if (!options.connection) {\n            throw new Error(\"No connection\");\n        }\n\n        this.connection = options?.connection;\n        this.table = options?.table;\n        this.columns = options?.columns;\n\n        this.build();\n    }\n\n    public get synchronize(): boolean {\n        return this.table.synchronize;\n    }\n\n    public get name(): string {\n        return this.table.name;\n    }\n\n    public get tableMetadata(): TableMetadata {\n        return this.tableMetadataStorage;\n    }\n\n    private build(): void {\n        this.tableMetadataStorage = new TableMetadata({\n            name: this.table.name,\n            target: this.table.target,\n            database: this.table.database,\n            owner: this.table.owner,\n            synchronize: this.table.synchronize,\n        });\n\n        this.tableMetadata.columns = this.columns.map((column) => new ColumnMetadata(column));\n    }\n}\n","import { AbstractStore } from \"../../types/abstract-store.type\";\n\nexport class YdbMetadataColumnStore extends AbstractStore {}\n","import { AbstractStore } from \"../../types/abstract-store.type\";\n\nexport class YdbMetadataTableStore extends AbstractStore {}\n","import { AbstractTable } from \"../types/abstract-table.type\";\nimport { ColumnMetadata } from \"./column-metadata\";\nimport { IndexMetadata } from \"./index-metadata\";\n\nexport class TableMetadata extends AbstractTable {\n    columns: ColumnMetadata[];\n\n    indices: IndexMetadata[];\n}\n","import { Inject, Injectable } from \"@nestjs/common\";\nimport { Driver } from \"ydb-sdk\";\nimport { CONNECTION_NAME } from \"../ydb.constant\";\nimport { IColumn, IYdbTable } from \"../ydb.types\";\nimport { EntityMetadata } from \"./entity-metadata\";\nimport { YdbMetadataColumnStore } from \"./store/ydb-metadata-column.store\";\nimport { YdbMetadataTableStore } from \"./store/ydb-metadata-table.store\";\n\n@Injectable()\nexport class YdbMetadata {\n    entitiesMetadata: EntityMetadata[] = [];\n\n    constructor(@Inject(CONNECTION_NAME) private connection: Driver) {}\n\n    build(): void {\n        const tables = YdbMetadataTableStore.get();\n        this.entitiesMetadata = tables.map((table) => this.createEntityMetadata(table));\n    }\n\n    private createEntityMetadata(table: IYdbTable): EntityMetadata {\n        const columns = YdbMetadataColumnStore.get<IColumn>().filter(({ target }) => target === table.target);\n\n        return new EntityMetadata({\n            connection: this.connection,\n            table,\n            columns,\n        });\n    }\n}\n","import { Inject, Injectable } from \"@nestjs/common\";\nimport { Driver, TableDescription, Types, Ydb } from \"ydb-sdk\";\nimport { Logger } from \"../logger/logger.provider\";\nimport { TableColumn } from \"../struct/table-column.struct\";\nimport { TableIndex } from \"../struct/table-index.struct\";\nimport { Table } from \"../struct/table.struct\";\nimport { primitiveYdbTypeToLocalType } from \"../utils/primitive-ydb-type-to-local-type.util\";\nimport { CONNECTION_NAME } from \"../ydb.constant\";\n\n@Injectable()\nexport class QueryRunner {\n    loadedTables: Table[] = [];\n\n    constructor(@Inject(CONNECTION_NAME) private driver: Driver, private logger: Logger) {}\n\n    async getTable(tableName: string): Promise<Table | null> {\n        this.loadedTables = await this.loadTables([tableName]);\n\n        return this.loadedTables[0] ?? null;\n    }\n\n    async getTables(tableNames?: string[]): Promise<Table[]> {\n        this.loadedTables = await this.loadTables(tableNames);\n\n        return this.loadedTables;\n    }\n\n    private async loadTables(tableNames?: string[]): Promise<Table[]> {\n        if (tableNames?.length === 0) {\n            return [];\n        }\n\n        const directoryListing = await this.driver.schemeClient.listDirectory(\"\");\n        let tablesEntry = directoryListing.children.filter((entity) => entity.type === Ydb.Scheme.Entry.Type.TABLE);\n        const {\n            self: { name: databaseName },\n        } = directoryListing;\n\n        this.logger.logSchema(`Start scanning for database: ${databaseName}`);\n\n        if (tableNames) {\n            tablesEntry = tablesEntry.filter(({ name }) => tableNames.includes(name));\n        }\n\n        this.logger.logSchema(`Found tables: ${tablesEntry.map(({ name }) => name).join(\", \")}`);\n\n        if (tablesEntry.length === 0) {\n            return [];\n        }\n\n        const session = await this.driver.tableClient.withSession(async (sessionState) => sessionState);\n\n        return Promise.all(\n            tablesEntry.map(async (options) => {\n                const { name } = options;\n                const table = new Table({ ...options });\n                const { columns, indexes, primaryKey } = await session.describeTable(name);\n\n                this.logger.logSchema(`Describe table: ${name}`);\n\n                table.columns = columns.map((columnMeta) => {\n                    const isNullable = !!columnMeta.type?.optionalType?.item;\n                    const column = new TableColumn({\n                        name: columnMeta.name,\n                        isNullable,\n                        isPrimary: primaryKey.length === 1 && primaryKey.includes(columnMeta.name),\n                        type: primitiveYdbTypeToLocalType(columnMeta.type?.optionalType?.item?.typeId),\n                        // TODO\n                        // isUnique\n                        // default\n                    });\n\n                    return column;\n                });\n\n                table.indices = indexes.map((indexMeta) => {\n                    const index = new TableIndex({ indicesColumns: indexMeta.indexColumns, name: indexMeta.name });\n\n                    return index;\n                });\n\n                return table;\n            }),\n        );\n    }\n}\n","import { ColumnMetadata } from \"../metadata/column-metadata\";\nimport { AbstractColumn } from \"../types/abstract-column.type\";\n\nexport class TableColumn extends AbstractColumn {\n    static new(metadata: ColumnMetadata): TableColumn {\n        const column = new TableColumn();\n\n        return column;\n    }\n}\n","import { AbstractIndex } from \"../types/abstract-index.type\";\n\nexport class TableIndex extends AbstractIndex {}\n","import { EntityMetadata } from \"../metadata/entity-metadata\";\nimport { AbstractTable } from \"../types/abstract-table.type\";\nimport { TableColumn } from \"./table-column.struct\";\nimport { TableIndex } from \"./table-index.struct\";\n\nexport class Table extends AbstractTable {\n    columns: TableColumn[];\n\n    indices: TableIndex[];\n\n    static new(metadata: EntityMetadata): Table {\n        const table = new Table({\n            name: metadata.name,\n            target: metadata.tableMetadata.target,\n            database: metadata.tableMetadata.database,\n            owner: metadata.tableMetadata.owner,\n            synchronize: metadata.synchronize,\n        });\n        table.columns = metadata.tableMetadata.columns.map((columnMetadata) => TableColumn.new(columnMetadata));\n\n        return table;\n    }\n\n    getDescription(): void {}\n}\n","import { IYdbColumnOptions } from \"../ydb.types\";\nimport { TYdbTypes } from \"./types\";\n\nexport abstract class AbstractColumn {\n    name!: string;\n\n    isNullable = false;\n\n    isPrimary = false;\n\n    // isUnique = false;\n\n    // default?: unknown;\n\n    type!: TYdbTypes;\n\n    constructor(metadata?: IYdbColumnOptions) {\n        this.name = metadata?.name;\n        this.isNullable = !!metadata?.isNullable;\n        this.isPrimary = !!metadata?.isPrimary;\n        // this.isUnique = !!options?.isUnique;\n        // this.default = options?.default || \"\";\n        this.type = metadata?.type;\n    }\n}\n","import { IYdbIndexOptions } from \"../ydb.types\";\n\nexport abstract class AbstractIndex {\n    indicesColumns: string[] = [];\n\n    constructor(options: IYdbIndexOptions) {\n        this.indicesColumns = options?.indicesColumns || [];\n    }\n}\n","export abstract class AbstractStore {\n    static #data = [];\n\n    static add<T>(item: T): void {\n        AbstractStore.#data.push(item);\n    }\n\n    static get<T>(): T[] {\n        return AbstractStore.#data;\n    }\n}\n","import { IYdbTable } from \"../ydb.types\";\nimport { AbstractColumn } from \"./abstract-column.type\";\nimport { AbstractIndex } from \"./abstract-index.type\";\n\nexport abstract class AbstractTable {\n    columns: AbstractColumn[];\n\n    indices: AbstractIndex[];\n\n    name: string;\n\n    database: string;\n\n    target: unknown;\n\n    owner: string;\n\n    constructor(private options: IYdbTable = {}) {\n        this.name = this.options?.name;\n        this.database = this.options?.database;\n        this.target = this.options?.target;\n        this.owner = this.options?.owner;\n    }\n}\n","export function getTableName(entityName: string): string {\n    return entityName\n        ?.replace(/([a-z])([A-Z])/g, \"$1 $2\")\n        .replace(\" \", \"_\")\n        .toLowerCase();\n}\n","export function isObject(value: unknown): value is Record<string, unknown> {\n    return value !== null && value?.toString() === \"[object Object]\";\n}\n","import { Ydb } from \"ydb-sdk\";\nimport { YdbTypesStatic } from \"../helpers/ydb-types-static.helper\";\nimport { TYdbTypes } from \"../types/types\";\n\nexport function primitiveYdbTypeToLocalType(ydbType: Ydb.Type.PrimitiveTypeId): TYdbTypes | null {\n    switch (ydbType) {\n        case Ydb.Type.PrimitiveTypeId.PRIMITIVE_TYPE_ID_UNSPECIFIED:\n            return null;\n        case Ydb.Type.PrimitiveTypeId.BOOL:\n            return YdbTypesStatic.Bool as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.INT8:\n            return YdbTypesStatic.Int8 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.UINT8:\n            return YdbTypesStatic.Uint8 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.INT16:\n            return YdbTypesStatic.Int16 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.UINT16:\n            return YdbTypesStatic.Uint16 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.INT32:\n            return YdbTypesStatic.Int32 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.UINT32:\n            return YdbTypesStatic.Uint32 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.INT64:\n            return YdbTypesStatic.Int64 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.UINT64:\n            return YdbTypesStatic.Uint64 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.FLOAT:\n            return YdbTypesStatic.Float as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.DOUBLE:\n            return YdbTypesStatic.Double as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.DATE:\n            return YdbTypesStatic.Date as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.DATETIME:\n            return YdbTypesStatic.Datetime as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.TIMESTAMP:\n            return YdbTypesStatic.Timestamp as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.INTERVAL:\n            return YdbTypesStatic.Interval as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.TZ_DATE:\n            return YdbTypesStatic.TzDate as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.TZ_DATETIME:\n            return YdbTypesStatic.TzDateTime as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.TZ_TIMESTAMP:\n            return YdbTypesStatic.TzTimestamp as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.STRING:\n            return YdbTypesStatic.String as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.UTF8:\n            return YdbTypesStatic.Utf8 as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.YSON:\n            return YdbTypesStatic.Yson as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.JSON:\n            return YdbTypesStatic.Json as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.UUID:\n            return YdbTypesStatic.Uuid as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.JSON_DOCUMENT:\n            return YdbTypesStatic.JsonDocument as TYdbTypes;\n        case Ydb.Type.PrimitiveTypeId.DYNUMBER:\n            return YdbTypesStatic.DyNumber as TYdbTypes;\n    }\n}\n","export const CONNECTION_NAME = \"defaultConnection\";\nexport const DB_TIMEOUT = 10_000;\n","import { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { AnonymousAuthService, Driver } from \"ydb-sdk\";\nimport { YDbBuilder } from \"./builder/ydb-builder.provider\";\nimport { Logger } from \"./logger/logger.provider\";\nimport { YdbMetadata } from \"./metadata/ydb-metadata.provider\";\nimport { QueryRunner } from \"./query-runner/query-runner.provider\";\nimport { CONNECTION_NAME, DB_TIMEOUT } from \"./ydb.constant\";\nimport { IYdbOptions } from \"./ydb.types\";\n\n@Global()\n@Module({})\nexport class YdbModule {\n    static forRoot(options?: IYdbOptions): DynamicModule {\n        const providers = [];\n        const exports = [];\n        const connectionProvider = {\n            provide: CONNECTION_NAME,\n            useFactory: async (): Promise<Driver> => {\n                const connection = await this.createConnection(options);\n\n                return connection;\n            },\n        };\n        const loggerFactory = {\n            provide: Logger,\n            useFactory: (): Logger => {\n                const logger = new Logger(options.logger);\n\n                return logger;\n            },\n        };\n\n        providers.push(connectionProvider, loggerFactory, QueryRunner, YdbMetadata, YDbBuilder);\n        exports.push(connectionProvider, loggerFactory, QueryRunner, YdbMetadata, YDbBuilder);\n\n        return {\n            module: YdbModule,\n            providers,\n            exports,\n        };\n    }\n\n    static forFeature(options: unknown): unknown {\n        // debugger\n        return {\n            module: YdbModule,\n        };\n    }\n\n    private static async createConnection(options: IYdbOptions): Promise<Driver> {\n        const { database, endpoint } = options;\n        const driver = new Driver({ database, endpoint, authService: new AnonymousAuthService() });\n\n        if (!(await driver.ready(DB_TIMEOUT))) {\n            console.error(`Driver has not become ready in ${DB_TIMEOUT}ms!`);\n\n            throw new Error(`Driver has not become ready in ${DB_TIMEOUT}ms!`);\n        }\n\n        // await driver.tableClient.withSession(async (session) => {\n        //     console.info(session);\n        //     debugger\n        //     // await createTable(session, logger);\n        //     // await fillTableWithData(session, logger);\n        // });\n        // debugger\n        return driver;\n    }\n}\n","module.exports = require(\"@nestjs/apollo\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/graphql\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"aws-serverless-express\");","module.exports = require(\"aws-serverless-express/middleware\");","module.exports = require(\"cli-highlight\");","module.exports = require(\"debug\");","module.exports = require(\"express\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"ydb-sdk\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"reflect-metadata\";\nimport { Handler, Context } from \"aws-lambda\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { ExpressAdapter } from \"@nestjs/platform-express\";\nimport express from \"express\";\nimport { createServer, proxy } from \"aws-serverless-express\";\nimport { Server } from \"node:http\";\nimport { AppModule } from \"./src/app.module\";\nimport { eventContext } from \"aws-serverless-express/middleware\";\n\nlet server: Server;\n\nasync function bootstrap(): Promise<Server> {\n    if (!server) {\n        const app = express();\n        const nest = await NestFactory.create(AppModule, new ExpressAdapter(app));\n\n        nest.use(eventContext());\n        await nest.init();\n\n        server = createServer(app, undefined, []);\n    }\n\n    return server;\n}\n\nexport const handler: Handler = async (event: unknown, context: Context) => {\n    server = await bootstrap();\n\n    return proxy(server, event, context, \"PROMISE\").promise;\n\n    // return {\n    //     statusCode: 200,\n    //     body: \"hello world!\",\n    // };\n};\n"],"names":["Controller","AppService","AppController","constructor","appService","Module","GraphQLModule","ApolloDriver","ConfigModule","YdbModule","ImagesModule","AppModule","imports","forRoot","path","driver","autoSchemaFile","endpoint","process","env","YDB_ENDPOINT","database","DATABASE","logger","controllers","providers","Query","Resolver","String","getHello","Column","Entity","PrimaryColumn","ImagesEntity","forFeature","Injectable","Logger","YdbMetadata","QueryRunner","Table","YDbBuilder","metadata","queryRunner","tablesMetadata","tablesToSyncMetadata","initialize","build","entitiesMetadata","filter","synchronize","tablesPath","map","name","getTables","synchronizeInOrder","renameColumns","createNewTables","dropRemovedColumns","addNewColumns","updatePrimaryKeys","updateExistColumns","createNewIndices","createNewChecks","isTableExist","loadedTables","find","table","logSchema","new","YdbTypesStatic","YdbMetadataColumnStore","isObject","typeOrOption","maybeOption","type","options","target","reflectKeyType","Reflect","getMetadata","Utf8","Number","Uint32","Boolean","Bool","add","YdbMetadataTableStore","getTableName","nameOrOptions","tableName","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint64","Float","Double","Decimal","DyNumber","Json","JsonDocument","Yson","Uuid","Date","Datetime","Timestamp","Interval","TzDate","TzDateTime","TzTimestamp","highlight","createDebug","enabled","debugQuery","debugSchema","debugLog","debugInfo","debugWarn","enable","sql","language","ignoreIllegals","logQuery","query","parameters","length","message","log","level","AbstractColumn","ColumnMetadata","TableMetadata","EntityMetadata","connection","columns","tableMetadataStorage","Error","tableMetadata","owner","column","AbstractStore","AbstractTable","indices","Inject","Driver","CONNECTION_NAME","tables","get","createEntityMetadata","Ydb","TableColumn","TableIndex","primitiveYdbTypeToLocalType","getTable","loadTables","tableNames","directoryListing","schemeClient","listDirectory","tablesEntry","children","entity","Scheme","Entry","Type","TABLE","self","databaseName","includes","join","session","tableClient","withSession","sessionState","Promise","all","indexes","primaryKey","describeTable","columnMeta","isNullable","optionalType","item","isPrimary","typeId","indexMeta","index","indicesColumns","indexColumns","AbstractIndex","columnMetadata","getDescription","push","entityName","replace","toLowerCase","value","toString","ydbType","PrimitiveTypeId","PRIMITIVE_TYPE_ID_UNSPECIFIED","BOOL","INT8","UINT8","INT16","UINT16","INT32","UINT32","INT64","UINT64","FLOAT","DOUBLE","DATE","DATETIME","TIMESTAMP","INTERVAL","TZ_DATE","TZ_DATETIME","TZ_TIMESTAMP","STRING","UTF8","YSON","JSON","UUID","JSON_DOCUMENT","DYNUMBER","DB_TIMEOUT","Global","AnonymousAuthService","exports","connectionProvider","provide","useFactory","createConnection","loggerFactory","module","authService","ready","console","error","NestFactory","ExpressAdapter","express","createServer","proxy","eventContext","server","bootstrap","app","nest","create","use","init","undefined","handler","event","context","promise"],"sourceRoot":""}